/* Map of GeoJSON data from Atheletes.geojson */

function createMap(){
    var map = L.map('map', {
        center: [41, -96],
        zoom: 4
    });

    //add OSM base tilelayer
    L.tileLayer('http://{s}.tile.stamen.com/watercolor/{z}/{x}/{y}.jpg').addTo(map);

    getData(map);
};

//Add some GeoJSON

//calculate the radius of each proportional symbol
function calcPropRadius(attValue) {
    //scale factor to adjust symbol size evenly
    var scaleFactor = .015;
    //area based on attribute value and scale factor
    var area = attValue * scaleFactor;
    //radius calculated based on area
    var radius = Math.sqrt(area/Math.PI);

    return radius;
};

function pointToLayer(feature, latlng, attributes){
    var attribute = attributes[0];
    //check
    console.log(attribute);
    
    //create marker options
    var options = {
        radius: 8,
        fillColor: "#f62e9c",
        color: "#000",
        weight: 1,
        opacity: 1,
        fillOpacity: 0.8
    };
    //For each feature, determine its value for the selected attribute
    var attValue = Number(feature.properties[attribute]);
     if (attValue == 0) {
        attValue = 1;
    }
    //Give each feature's circle marker a radius based on its attribute value
    options.radius = attValue;
    //previous code options.radius = calcPropRadius(attValue);
    
    //create circle marker layer
    var layer = L.circleMarker(latlng, options);
    var panelContent = "<p><b>State:</b> " + 
                        feature.properties.State + 
                        "</p><p><b>Total HS Athletes 2009:</b> " +
                        feature.properties[attribute] + "</p>";
    //build popup content string
    var popupContent = feature.properties.State;
    //bind the popup to the circle marker
    layer.bindPopup(popupContent, {
        offset: new L.Point(0, -options.radius),
        closeButton: false
    });
    
    //return the circle marker to the L.geoJson pointToLayer option
    layer.on({
        mouseover: function() {
            this.openPopup();
        },
        mouseout: function() {
            this.closePopup();
        },
        click: function() {
            $("#panel").html(panelContent);
        }
    });
    return layer;
};

function createPropSymbols(data, map, attributes) {
    L.geoJson(data, {
        pointToLayer: function(feature, latlng){
            return pointToLayer(feature, latlng, attributes);
        }
    }).addTo(map);
};

function createSequenceControls(map){
    //create range input element (slider)
    $('#panel').append('<input class="range-slider" type="range">');
    $('panel').append('<button class="skip" id="reverse">Reverse</button>');
    $('panel').append('<button class="skip" id="forward">Skip</button>');
    //$('#reverse').html('<img src="img/noun_539377_cc.png"/>');
    //$('#forward').html('<img src="img/forward.png"/>');
    
    //set slider attributes
    $('.range-slider').attr({
        max: 6,
        min:0,
        value:0,
        step:1
    });
};

function processData(data) {
    //emtpy array to hold attributes
    var attributes = [];
    var properties = data.features[0].properties;
    
    for (var attribute in properties) {
        if (attribute.includes("Total")) {
            attributes.push(attribute);
        };
    };
    console.log(attributes);
    
    return attributes;
};

//complex way to load via ajax
function getData(map){
    $.ajax("data/athletes.geojson", {
        dataType: "json",
        success: function(response){
            //create an attributes array
            var attributes = processData(response);
            
            createPropSymbols(response, map);
            createSequenceControls(map);
        }
    });
};

$(document).ready(createMap);




//Example 2.7 line 1...function to create the legend
function createLegend(map, attributes){
    var LegendControl = L.Control.extend({
        options: {
            position: 'bottomright'
        },

        onAdd: function (map) {
            // create the control container with a particular class name
            var container = L.DomUtil.create('div', 'legend-control-container');

            //add temporal legend div to container
            $(container).append('<div id="temporal-legend">')

            //Step 1: start attribute legend svg string
             var svg = '<svg id="attribute-legend" width="180px" height="180px">';

            //array of circle names to base loop on
            var circles = ["max", "mean", "min"];
            
            //Example 3.6 line 4...array of circle names to base loop on
            var circles = ["max", "mean", "min"];

            //Step 2: loop to add each circle and text to svg string
            for (var i=0; i<circles.length; i++){
                //circle string
                svg += '<circle class="legend-circle" id="' + circles[i] + 
                '" fill="#F47821" fill-opacity="0.8" stroke="#000000" cx="30"/>';

                //text string
                svg += '<text id="' + circles[i] + '-text" x="65" y="60"></text>';
        };

        //close svg string
        svg += "</svg>";

        //add attribute legend svg to container
        $(container).append(svg);

//Example 3.7 line 1...Update the legend with new attribute
function updateLegend(map, attribute){
    //create content for legend
    var year = attribute.split("_")[1];
    var content = "Population in " + year;

    //replace legend content
    $('#temporal-legend').html(content);

    //Example 3.8 line 43...get the max, mean, and min values as an object
    var circleValues = getCircleValues(map, attribute);

    for (var key in circleValues){
        //get the radius
        var radius = calcPropRadius(circleValues[key]);

        //Step 3: assign the cy and r attributes
        $('#'+key).attr({
            cy: 179 - radius,
            r: radius
        });
    };
};            
            
//Calculate the max, mean, and min values for a given attribute
function getCircleValues(map, attribute){
    //start with min at highest possible and max at lowest possible number
    var min = Infinity,
        max = -Infinity;

    map.eachLayer(function(layer){
        //get the attribute value
        if (layer.feature){
            var attributeValue = Number(layer.feature.properties[attribute]);

            //test for min
            if (attributeValue < min){
                min = attributeValue;
            };

            //test for max
            if (attributeValue > max){
                max = attributeValue;
            };
        };
    });

    //set mean
    var mean = (max + min) / 2;

    //return values as an object
    return {
        max: max,
        mean: mean,
        min: min
    };
};

            